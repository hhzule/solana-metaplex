{"version":3,"file":"map.cjs","sources":["../../src/map.ts"],"sourcesContent":["import {\n  BaseSerializerOptions,\n  ExpectedFixedSizeSerializerError,\n  mergeBytes,\n  Serializer,\n} from '@metaplex-foundation/umi-serializers-core';\nimport { u32 } from '@metaplex-foundation/umi-serializers-numbers';\nimport { ArrayLikeSerializerSize } from './arrayLikeSerializerSize';\nimport {\n  getResolvedSize,\n  getSizeDescription,\n  getSizeFromChildren,\n  getSizePrefix,\n} from './utils';\nimport { InvalidNumberOfItemsError } from './errors';\n\n/**\n * Defines the options for `Map` serializers.\n * @category Serializers\n */\nexport type MapSerializerOptions = BaseSerializerOptions & {\n  /**\n   * The size of the map.\n   * @defaultValue `u32()`\n   */\n  size?: ArrayLikeSerializerSize;\n};\n\n/**\n * Creates a serializer for a map.\n *\n * @param key - The serializer to use for the map's keys.\n * @param value - The serializer to use for the map's values.\n * @param options - A set of options for the serializer.\n * @category Serializers\n */\nexport function map<TK, TV, UK extends TK = TK, UV extends TV = TV>(\n  key: Serializer<TK, UK>,\n  value: Serializer<TV, UV>,\n  options: MapSerializerOptions = {}\n): Serializer<Map<TK, TV>, Map<UK, UV>> {\n  const size = options.size ?? u32();\n  if (\n    size === 'remainder' &&\n    (key.fixedSize === null || value.fixedSize === null)\n  ) {\n    throw new ExpectedFixedSizeSerializerError(\n      'Serializers of \"remainder\" size must have fixed-size items.'\n    );\n  }\n  return {\n    description:\n      options.description ??\n      `map(${key.description}, ${value.description}; ${getSizeDescription(\n        size\n      )})`,\n    fixedSize: getSizeFromChildren(size, [key.fixedSize, value.fixedSize]),\n    maxSize: getSizeFromChildren(size, [key.maxSize, value.maxSize]),\n    serialize: (map: Map<TK, TV>) => {\n      if (typeof size === 'number' && map.size !== size) {\n        throw new InvalidNumberOfItemsError('map', size, map.size);\n      }\n      const itemBytes = Array.from(map, ([k, v]) =>\n        mergeBytes([key.serialize(k), value.serialize(v)])\n      );\n      return mergeBytes([getSizePrefix(size, map.size), ...itemBytes]);\n    },\n    deserialize: (bytes: Uint8Array, offset = 0) => {\n      const map: Map<UK, UV> = new Map();\n      if (typeof size === 'object' && bytes.slice(offset).length === 0) {\n        return [map, offset];\n      }\n      const [resolvedSize, newOffset] = getResolvedSize(\n        size,\n        [key.fixedSize, value.fixedSize],\n        bytes,\n        offset\n      );\n      offset = newOffset;\n      for (let i = 0; i < resolvedSize; i += 1) {\n        const [deserializedKey, kOffset] = key.deserialize(bytes, offset);\n        offset = kOffset;\n        const [deserializedValue, vOffset] = value.deserialize(bytes, offset);\n        offset = vOffset;\n        map.set(deserializedKey, deserializedValue);\n      }\n      return [map, offset];\n    },\n  };\n}\n"],"names":["map","key","value","options","size","u32","fixedSize","ExpectedFixedSizeSerializerError","description","getSizeDescription","getSizeFromChildren","maxSize","serialize","InvalidNumberOfItemsError","itemBytes","Array","from","k","v","mergeBytes","getSizePrefix","deserialize","bytes","offset","Map","slice","length","resolvedSize","newOffset","getResolvedSize","i","deserializedKey","kOffset","deserializedValue","vOffset","set"],"mappings":"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"}